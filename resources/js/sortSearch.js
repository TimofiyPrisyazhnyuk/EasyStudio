/** * Change visibility field decode code */$(document).on('click', '.toggle-password', function () {    $(this).toggleClass("fa-eye fa-eye-slash");    let input = $($(this).attr("toggle"));    if (input.attr("type") === "password") {        input.attr("type", "text");    } else {        input.attr("type", "password");    }});const sortCode = $('#app-sort');const appendBox = $('.app-append-block');/** * onChange query to db  ajax ( sort ) */sortCode.on('change', function () {    getSecretCodes($(this).find('option:selected').attr('title'), $(this).val());});/** * onChange query to db  ajax (search) */$('#js-search-click').on('click', function () {    let searchField = $('#js-search');    getSecretCodes(searchField.attr('title'),searchField.val());});/** * Search and sort codes ajax * * @type {*|jQuery|HTMLElement} */function getSecretCodes(operator, value) {    $.ajaxSetup({        headers: {            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')        }    });    $.ajax({        type: "POST",        url: '/sort',        data: {            'operator': operator,            'value': value        },        success: function (data) {            appendBox.find('.app-code-block').remove();            appendBox.find('.app-append-block').remove();            appendCodes(data);        }    });}function appendCodes(data) {    if (!isEmpty(data)) {        appendBox.append('<div class="app-append-block">' +            '<p>Not have saved secret codes.</p>' +            '</div>');    } else {        for (let code in data) {            appendBox.append(                '<div class="mb-3 app-code-block">' +                '<div class="badge-info"><b>' + data[code].secret_code.code_name + '</b></div>' +                '<div class="badge-danger">' + data[code].secret_code.secret_code + '</div>' +                '<div>' +                '<input id="' + data[code].id + '" type="password" class="form-control" name="password" value="' +                returnValue(data[code].secret_code.decode) + '" disabled="">' +                '<span toggle="#' + data[code].id + '" class="fa fa-fw fa-eye fa-2x field-icon toggle-password"></span>' +                '</div>' +                '</div>'            );        }    }}/** * Generate string with secret decode code * * @param data * @returns {string} */function returnValue(data) {    let decodeCode = '';    for (let decode in data) {        decodeCode += data[decode].decode_code + ' ';    }    return (decodeCode);}/** * Check what returned from back-end * * @param object * @returns {boolean} */function isEmpty(object) {    for (let key in object)        if (object.hasOwnProperty(key)) return true;    return false;}